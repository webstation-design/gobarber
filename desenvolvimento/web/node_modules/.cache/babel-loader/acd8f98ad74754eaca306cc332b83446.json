{"ast":null,"code":"var _jsxFileName = \"D:\\\\Trabalhos\\\\webstation\\\\gobarber\\\\desenvolvimento\\\\web\\\\src\\\\components\\\\Notifications\\\\index.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt';\nimport api from \"../../services/api\";\nimport { Container, Badge, NotificationList, Scroll, Notification } from './styles';\nexport default function Notifications() {\n  const [visible, setVisible] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const hasUnread = useMemo(() => !!notifications.find(notification => notification.read === false), [notifications]);\n  useEffect(() => {\n    async function loadNotification() {\n      const response = await api.get('notifications');\n      const data = response.data.map(notification => ({ ...notification,\n        timeDistance: formatDistance(parseISO(notification.createdAt), new Date(), {\n          addSuffix: true,\n          locale: pt\n        })\n      }));\n      setNotifications(data);\n    }\n\n    loadNotification();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handleMarkAsRead(id) {\n    await api.put(`notifications/${id}`);\n    setNotifications(notifications.map(notification => notification.id === id ? { ...notification,\n      read: true\n    } : notification));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    onClick: handleToggleVisible,\n    hasUnread: hasUnread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MdNotifications, {\n    color: \"#7159c1\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(NotificationList, {\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Scroll, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, notifications.map(notification => /*#__PURE__*/React.createElement(Notification, {\n    key: notification.id,\n    unread: !notification.read,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, notification.content), /*#__PURE__*/React.createElement(\"time\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, notification.timeDistance), !notification.read && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleMarkAsRead(notification.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Marcar como lida\"))))));\n}","map":{"version":3,"sources":["D:/Trabalhos/webstation/gobarber/desenvolvimento/web/src/components/Notifications/index.js"],"names":["React","useState","useEffect","useMemo","MdNotifications","parseISO","formatDistance","pt","api","Container","Badge","NotificationList","Scroll","Notification","Notifications","visible","setVisible","notifications","setNotifications","hasUnread","find","notification","read","loadNotification","response","get","data","map","timeDistance","createdAt","Date","addSuffix","locale","handleToggleVisible","handleMarkAsRead","id","put","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { MdNotifications } from 'react-icons/md';\r\nimport { parseISO, formatDistance } from 'date-fns';\r\nimport pt from 'date-fns/locale/pt';\r\n\r\nimport api from '~/services/api';\r\n\r\nimport { Container, Badge, NotificationList, Scroll, Notification } from './styles';\r\n\r\nexport default function Notifications() {\r\n  const [visible, setVisible] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const hasUnread = useMemo(\r\n    () => !!notifications.find(notification => notification.read === false),\r\n    [notifications]\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function loadNotification() {\r\n      const response = await api.get('notifications');\r\n\r\n      const data = response.data.map(notification => ({\r\n        ...notification,\r\n        timeDistance: formatDistance(\r\n          parseISO(notification.createdAt),\r\n          new Date(),\r\n          { addSuffix: true, locale: pt }\r\n        )\r\n      }));\r\n\r\n      setNotifications(data);\r\n    }\r\n\r\n    loadNotification();\r\n  }, []);\r\n\r\n  function handleToggleVisible() {\r\n    setVisible(!visible);\r\n  }\r\n\r\n  async function handleMarkAsRead(id) {\r\n    await api.put(`notifications/${id}`);\r\n\r\n    setNotifications(\r\n      notifications.map(notification =>\r\n        notification.id === id ? { ...notification, read: true } : notification\r\n      )\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Badge onClick={handleToggleVisible} hasUnread={hasUnread}>\r\n        <MdNotifications color=\"#7159c1\" size={20} />\r\n      </Badge>\r\n\r\n      <NotificationList visible={visible}>\r\n        <Scroll>\r\n          {notifications.map(notification => (\r\n            <Notification key={notification.id} unread={!notification.read}>\r\n              <p>{notification.content}</p>\r\n              <time>{notification.timeDistance}</time>\r\n              {!notification.read && (\r\n                <button type=\"button\" onClick={() => handleMarkAsRead(notification.id)}>Marcar como lida</button>\r\n              )}\r\n            </Notification>\r\n          ))}\r\n        </Scroll>\r\n      </NotificationList>\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}